apiVersion: v1
kind: Service
metadata:
  name: registryviews
  labels:
    service: registryviews
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    {{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
    {{- end }}{{/* range .Values.extraLabels */}}
spec:
  ports:
    - port: 8080
      protocol: TCP
      name: external
  selector:
    service: registryviews
    release: {{ .Release.Name }}
---
{{ include "smartcheck.service.database.secret" (dict "Chart" .Chart "Values" .Values "Release" .Release "service" "registryviews") }}

---
apiVersion: v1
kind: Service
metadata:
  name: registryviews-internal
  labels:
    service: registryviews-internal
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    {{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
    {{- end }}{{/* range .Values.extraLabels */}}
spec:
  ports:
    - port: 8081
      protocol: TCP
      name: internal
  selector:
    service: registryviews
    release: {{ .Release.Name }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registryviews
  labels:
    service: registryviews
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    appVersion: {{ .Chart.AppVersion }}
    metrics: include
    {{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
    {{- end }}{{/* range .Values.extraLabels */}}
spec:
  # We set revisionHistoryLimit to 0 because rollback should be done
  # using `helm rollback` rather than with `kubectl rollout undo`, so
  # we don't need to keep the old `ReplicaSet`s around.
  # https://kubernetes.io/docs/concepts/workloads/controllers/deployment
  revisionHistoryLimit: 0
  replicas: {{ default 1 .Values.replicas.registryviews }}
  selector:
    matchLabels:
      service: registryviews
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        service: registryviews
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        appVersion: {{ .Chart.AppVersion }}
        metrics: include
        {{- range $k, $v := (default (dict) .Values.extraLabels) }}
        {{ $k }}: {{ quote $v }}
        {{- end }}{{/* range .Values.extraLabels */}}
    spec:
      automountServiceAccountToken: false
      serviceAccountName: {{ include "smartcheck.service.account.name" (dict "Chart" .Chart "Values" .Values "Release" .Release "role" "registryAccess") }}
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.registryviews }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $containerSecurityContext := default .Values.securityContext.default.container $securityContext.container }}
{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}{{/* if $securityContextEnabled */}}
      initContainers:
        - {{ include "smartcheck.db-initcontainer" (dict "Values" .Values "Chart" .Chart "Release" .Release "service" "registryviews") | nindent 10 | trim }}

      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.registryviews }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if $secret }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}{{/* if $secret */}}
      containers:
        - name: registryviews
          {{- if $securityContextEnabled }}
          securityContext: {{ toYaml $containerSecurityContext | nindent 12 }}
          {{- end }}{{/* if $securityContextEnabled */}}
          {{- $project := (default (default "deepsecurity" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}{{/* with .Values.images.registryviews */}}
          ports:
            - containerPort: 8080
              name: external
            - containerPort: 8081
              name: internal
            - containerPort: 8082
              name: metrics
            - containerPort: 8083
              name: health
          livenessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          args:
            - --internal-base=http://registryviews:8081
            - --authorization-url=http://auth-internal:8081
            - --database-connection-string=postgres:postgres://
            - --database-secret=$(DB_SECRET)
            - --scan-url=http://scan-internal:8081
            - --license-url=http://license-internal:8081
            - --use-strict-transport-security=true
            - --use-strict-transport-security-includes-subdomains=false
            - --use-strict-transport-security-includes-preload=false
            {{- if .Values.telemetry.enabled }}
            - --telemetry-endpoint=http://metrics-internal:8081
            {{- end }}
          env:
            {{- include "smartcheck.service.database.env" (dict "Chart" .Chart "Release" .Release "Values" .Values "service" "registryviews") | nindent 12 }}
            {{- include "smartcheck.proxy.env" . | nindent 12 }}
          volumeMounts:
            {{- $volumeMounts := include "smartcheck.db-trust-volume-mount" . | nindent 12 }}
            {{- if (trim $volumeMounts) }}
            {{- $volumeMounts }}
            {{- else }}
            # emptyDir: as the workaround of amazon-eks-pod-identity-webhook#17 (fixed in PR#18, does not deploy into the latest EKS yet.)
            - name: work
              mountPath: /work
            {{- end }}{{/* if $volumeMounts */}}
          resources: {{ toYaml (default .Values.resources.defaults .Values.resources.registryviews) | nindent 12 }}
      volumes:
        {{- $volumes := include "smartcheck.db-trust-volume" . | nindent 8 }}
        {{- if (trim $volumes) }}
        {{- $volumes }}
        {{- else }}
        # emptyDir: as the workaround of amazon-eks-pod-identity-webhook#17 (fixed in PR#18, does not deploy into the latest EKS yet.)
        - name: work
          emptyDir: {}
        {{- end }}{{/* if $volumes */}}
      nodeSelector: {{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.registryviews) | nindent 8 }}
      tolerations: {{ toYaml (default .Values.tolerations.defaults .Values.tolerations.registryviews) | nindent 8 }}
      restartPolicy: Always

{{ if .Values.networkPolicy.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: registryviews
  labels:
    service: registryviews
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    {{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
    {{- end }}{{/* range .Values.extraLabels */}}
spec:
  podSelector:
    matchLabels:
      service: registryviews
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
      {{- range $k, $v := (default (dict) .Values.extraLabels) }}
      {{ $k }}: {{ quote $v }}
      {{- end }}{{/* range .Values.extraLabels */}}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              service: proxy
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
              {{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
              {{- end }}{{/* range .Values.extraLabels */}}
      ports:
        - protocol: TCP
          port: 8080
    - from:
        - podSelector:
            matchLabels:
              service: scan
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
              {{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
              {{- end }}{{/* range .Values.extraLabels */}}
        - podSelector:
            matchLabels:
              task: scan
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
              {{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
              {{- end }}{{/* range .Values.extraLabels */}}
        - podSelector:
            matchLabels:
              service: license
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
              {{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
              {{- end }}{{/* range .Values.extraLabels */}}
      ports:
        - protocol: TCP
          port: 8081

    - from: # any -- this is for metrics
      ports:
        - protocol: TCP
          port: 8082
    - from: # any -- this sould just be kubelet for health probes
      ports:
        - protocol: TCP
          port: 8083
  egress:
    {{- include "smartcheck.to-dns-networkpolicy" . | nindent 4 }}
    {{- include "smartcheck.to-db-networkpolicy" . | nindent 4 }}
    {{- include "smartcheck.to-internal-service-networkpolicy" (dict "Release" .Release "Values" .Values "services" (list "auth" "scan" "license" "metrics")) | nindent 4 }}
    # allow egress to registries on 80, 443, and any provided additional ports
    - to: # any
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443
        {{- range $port := .Values.networkPolicy.additionalRegistryPorts }}
        - protocol: TCP
          port: {{ $port }}
        {{- end }}{{/* range .Values.networkPolicy.additionalRegistryPorts */}}
    {{- include "smartcheck.networkpolicy.outbound" . | nindent 4 }}
{{- end }}{{/* if .Values.networkPolicy.enabled */}}
