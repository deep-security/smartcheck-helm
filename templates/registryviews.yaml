apiVersion: v1
kind: Service
metadata:
  name: registryviews
  labels:
    service: registryviews
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  ports:
    - port: 8080
      protocol: TCP
      name: external
  selector:
    service: registryviews
    release: {{ .Release.Name }}

---
apiVersion: v1
kind: Service
metadata:
  name: registryviews-internal
  labels:
    service: registryviews-internal
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  ports:
    - port: 8081
      protocol: TCP
      name: internal
  selector:
    service: registryviews
    release: {{ .Release.Name }}

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: registryviews
  labels:
    service: registryviews
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    metrics: include
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  replicas: {{ default 1 .Values.replicas.registryviews }}
  template:
    metadata:
{{ $seccomp := default .Values.seccomp.default .Values.seccomp.registryviews }}
{{- if $seccomp.profile }}
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: {{ quote $seccomp.profile }}
{{- end }}
      labels:
        service: registryviews
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        metrics: include
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
        {{ $k }}: {{ quote $v }}
{{- end }}
    spec:
      automountServiceAccountToken: false
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.registryViews }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $containerSecurityContext := default .Values.securityContext.default.container $securityContext.container }}
{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.registryviews }}
      {{- $secret := (default $imageDefaults.imagePullSecret .imagePullSecret) | quote }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret }}
      {{- end }}
      containers:
        - name: registryviews
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $containerSecurityContext | indent 12 }}
{{- end }}
          {{- $project := (default (default "deepsecurity" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}

          {{- if eq (default "" .registry) "-" }}
          image: {{ printf "%s:%s" $repository $tag | quote }}
          {{- else if eq (default "-" $imageDefaults.registry) "-" }}
          image: {{ printf "%s:%s" $repository $tag | quote }}
          {{- else }}
          image: {{ printf "%s/%s:%s" (default $imageDefaults.registry .registry) $repository $tag | quote }}
          {{- end }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}
          ports:
            - containerPort: 8080
              name: external
            - containerPort: 8081
              name: internal
            - containerPort: 8082
              name: metrics
            - containerPort: 8083
              name: health
          livenessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          args:
            - --internal-base=http://registryviews:8081
            - --authorization-url=http://auth-internal:8081
            - --scan-url=http://scan-internal:8081
            - --database-connection-string=postgres:postgres://db/registryviewsdb?sslmode=disable&connect_timeout=5 # seconds
            - --database-secret=$(DB_SECRET)
            - --cursor-encryption-secret=$(CURSOR_ENCRYPTION_SECRET)
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: {{ template "smartcheck.fullname" . }}-db
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: {{ template "smartcheck.fullname" . }}-db
            - name: DB_SECRET
              valueFrom:
                secretKeyRef:
                  key: database-secret
                  name: {{ template "smartcheck.fullname" . }}-db
            - name: HTTP_PROXY
              valueFrom:
                configMapKeyRef:
                  name: {{ template "smartcheck.fullname" . }}-outbound-proxy
                  key: httpProxy
            - name: HTTPS_PROXY
              valueFrom:
                configMapKeyRef:
                  name: {{ template "smartcheck.fullname" . }}-outbound-proxy
                  key: httpsProxy
            - name: NO_PROXY
              valueFrom:
                configMapKeyRef:
                  name: {{ template "smartcheck.fullname" . }}-outbound-proxy
                  key: noProxy
            - name: PROXY_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "smartcheck.fullname" . }}-outbound-proxy-credentials
                  key: username
            - name: PROXY_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ template "smartcheck.fullname" . }}-outbound-proxy-credentials
                  key: password
            - name: CURSOR_ENCRYPTION_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: {{ template "smartcheck.fullname" . }}-cursor
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.registryviews) | indent 12 }}
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.registryviews) | indent 8 }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.registryviews) | indent 8 }}
      restartPolicy: Always

{{ if .Values.networkPolicy.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: registryviews
  labels:
    service: registryviews
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  podSelector:
    matchLabels:
      service: registryviews
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
      {{ $k }}: {{ quote $v }}
{{- end }}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              service: proxy
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
      ports:
        - protocol: TCP
          port: 8080
    - from:
        - podSelector:
            matchLabels:
              service: scan
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
        - podSelector:
            matchLabels:
              task: scan
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
      ports:
        - protocol: TCP
          port: 8081

    - from: # any -- this is for metrics
      ports:
        - protocol: TCP
          port: 8082
    - from: # any -- this sould just be kubelet for health probes
      ports:
        - protocol: TCP
          port: 8083
  egress:
    - to:
        - podSelector:
            matchLabels:
              service: scan
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
        - podSelector:
            matchLabels:
              service: auth
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
      ports:
        - protocol: TCP
          port: 8081
    - to:
        - podSelector:
            matchLabels:
              service: db
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
      ports:
        - protocol: TCP
          port: 5432
    - to: # any
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    - to: # any
      ports:
        - protocol: TCP
          port: 80
    - to: # any
      ports:
        - protocol: TCP
          port: 443
{{- end }}
