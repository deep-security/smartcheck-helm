apiVersion: v1
kind: Service
metadata:
  name: license
  labels:
    service: license
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  ports:
    - port: 8080
      protocol: TCP
      name: external
  selector:
    service: license
    release: {{ .Release.Name }}

---
apiVersion: v1
kind: Service
metadata:
  name: license-internal
  labels:
    service: license-internal
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  ports:
    - port: 8081
      protocol: TCP
      name: internal
  selector:
    service: license
    release: {{ .Release.Name }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: license
  labels:
    service: license
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    appVersion: {{ .Chart.AppVersion }}
    metrics: include
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  # We set revisionHistoryLimit to 0 because rollback should be done
  # using `helm rollback` rather than with `kubectl rollout undo`, so
  # we don't need to keep the old `ReplicaSet`s around.
  # https://kubernetes.io/docs/concepts/workloads/controllers/deployment
  revisionHistoryLimit: 0
  replicas: {{ default 1 .Values.replicas.license }}
  selector:
    matchLabels:
      service: license
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        service: license
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        appVersion: {{ .Chart.AppVersion }}
        metrics: include
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
        {{ $k }}: {{ quote $v }}
{{- end }}
    spec:
      automountServiceAccountToken: false
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.license }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $containerSecurityContext := default .Values.securityContext.default.container $securityContext.container }}
{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.license }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret }}
      {{- end }}
      containers:
        - name: license
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $containerSecurityContext | indent 12 }}
{{- end }}
          {{- $project := (default (default "deepsecurity" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}
          ports:
            - containerPort: 8080
              name: external
            - containerPort: 8081
              name: internal
            - containerPort: 8082
              name: metrics
            - containerPort: 8083
              name: health
          livenessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          args:
            - --internal-base=http://license-internal:8081
            - --authorization-url=http://auth-internal:8081
            - --use-strict-transport-security=true
            - --use-strict-transport-security-includes-subdomains=false
            - --use-strict-transport-security-includes-preload=false
            {{- if .Values.telemetry.enabled }}
            - --telemetry-endpoint=http://metrics-internal:8081
            {{- end }}
            - --cloud-one-endpoint={{ default "" .Values.cloudOne.endpoint }}
            - --cloud-one-api-key={{ default "" .Values.cloudOne.apiKey }}
          env:
            {{- include "smartcheck.proxy.env" . | nindent 12 }}
            {{- include "smartcheck.activation-code.env" . | nindent 12 }}
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.license) | indent 12 }}
          volumeMounts:
            - name: activation-code
              mountPath: /data/license
      volumes:
        - name: activation-code
          secret:
            secretName: {{ template "smartcheck.fullname" . }}-activation-code
            items:
              - key: code
                path: code
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.license) | indent 8 }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.license) | indent 8 }}
      restartPolicy: Always

{{ if .Values.networkPolicy.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: license
  labels:
    service: license
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  podSelector:
    matchLabels:
      service: license
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
      {{ $k }}: {{ quote $v }}
{{- end }}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - podSelector:
          matchLabels:
            service: proxy
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
            {{ $k }}: {{ quote $v }}
{{- end }}
      ports:
        - protocol: TCP
          port: 8080
    - from:
      - podSelector:
          matchLabels:
            service: registryviews
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
            {{ $k }}: {{ quote $v }}
{{- end }}
      - podSelector:
          matchLabels:
            service: malware-scan
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
            {{ $k }}: {{ quote $v }}
{{- end }}
      - podSelector:
          matchLabels:
            service: metrics
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
            {{ $k }}: {{ quote $v }}
{{- end }}
      ports:
        - protocol: TCP
          port: 8081
    - from: # any -- this is for metrics
      ports:
        - protocol: TCP
          port: 8082
    - from: # any -- this should just be kubelet for health probes
      ports:
        - protocol: TCP
          port: 8083
  egress:
    {{- include "smartcheck.to-internal-service-networkpolicy" (dict "Release" .Release "Values" .Values "services" (list "auth" "metrics")) | nindent 4 }}
    - to: # any
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    - to: # any
      ports:
      - protocol: TCP
        port: 80
    - to: # any
      ports:
      - protocol: TCP
        port: 443
    {{- include "smartcheck.networkpolicy.outbound" . | nindent 4 }}
{{- end }}
