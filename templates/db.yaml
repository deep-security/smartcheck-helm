{{- if not .Values.db.host -}}
apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    service: db
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  type: ClusterIP
  ports:
    - port: 5432
      protocol: TCP
      name: db
  selector:
    service: db
    release: {{ .Release.Name }}

{{ if .Values.persistence.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ template "smartcheck.fullname" . }}-app-db
  labels:
    service: db
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  accessModes:
    - ReadWriteOnce
{{- $storageClassName := default (default "" .Values.persistence.storageClassName) .Values.persistence.db.storageClassName }}
{{- if $storageClassName }}
  storageClassName: {{ $storageClassName }}
{{- end }}
  resources:
    requests:
      storage: {{ default "8Gi" .Values.persistence.db.size }}

{{ end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  labels:
    service: db
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    appVersion: {{ .Chart.AppVersion }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  # We use `Recreate` as the update strategy because a rolling update
  # will not work -- the new pod won't come up because it can't mount
  # the ReadWriteOnce PV.
  strategy:
    type: Recreate
    # Providing an explicitly-null rollingUpdate because of helm#5144
    rollingUpdate: null
  # We set revisionHistoryLimit to 0 because rollback should be done
  # using `helm rollback` rather than with `kubectl rollout undo`, so
  # we don't need to keep the old `ReplicaSet`s around.
  # https://kubernetes.io/docs/concepts/workloads/controllers/deployment
  revisionHistoryLimit: 0
  replicas: {{ default 1 .Values.replicas.db }}
  selector:
    matchLabels:
      service: db
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        service: db
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        appVersion: {{ .Chart.AppVersion }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
        {{ $k }}: {{ quote $v }}
{{- end }}
    spec:
      automountServiceAccountToken: false
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.db }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $containerSecurityContext := default .Values.securityContext.default.container $securityContext.container }}
{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.db }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}
      containers:
        - name: db
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $containerSecurityContext | indent 12 }}
{{- end }}
          {{- $project := (default (default "deepsecurity" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}
          ports:
            - name: db
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER"
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER"
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 60
          env:
            ## POSTGRES_DB
            ## This optional environment variable can be used to define a different name for the default
            ## database that is created when the image is first started. If it is not specified, then the
            ## value of POSTGRES_USER will be used.
            ## See also: https://hub.docker.com/_/postgres/
            - name: POSTGRES_DB
              value: ""

            ## POSTGRES_INITDB_ARGS
            ## This optional environment variable can be used to send arguments to postgres initdb.
            ## The value is a space separated string of arguments as postgres initdb would expect them.
            ## See also: https://hub.docker.com/_/postgres/
            - name: POSTGRES_INITDB_ARGS
              value: ""

            ## PGDATA
            ## This optional environment variable can be used to define another location - like a subdirectory
            ## - for the database files. The default is /var/lib/postgresql/data, but if the data volume you're
            ## using is a fs mountpoint (like with GCE persistent disks), Postgres initdb recommends a subdirectory
            ## (for example /var/lib/postgresql/data/pgdata ) be created to contain the data.
            ## See also: https://hub.docker.com/_/postgres/
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata

            ## POSTGRES_USER
            ## This optional environment variable is used in conjunction with POSTGRES_PASSWORD to set a user
            ## and its password. This variable will create the specified user with superuser power and a database
            ## with the same name. If it is not specified, then the default user of postgres will be used.
            ## See also: https://hub.docker.com/_/postgres/
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: {{ template "smartcheck.fullname" . }}-db

            ## POSTGRES_PASSWORD
            ## This environment variable is recommended for you to use the PostgreSQL image. This environment
            ## variable sets the superuser password for PostgreSQL. The default superuser is defined by the
            ## POSTGRES_USER environment variable.
            ##
            ## Note 1: The PostgreSQL image sets up trust authentication locally so you may notice a password
            ## is not required when connecting from localhost (inside the same container). However, a password
            ## will be required if connecting from a different host/container.
            ##
            ## Note 2: This variable defines the superuser password in the PostgreSQL instance, as set by the
            ## initdb script during inital container startup. It has no effect on the PGPASSWORD environment
            ## variable that may be used by the psql client at runtime, as described at
            ## https://www.postgresql.org/docs/10/static/libpq-envars.html.
            ## See also: https://hub.docker.com/_/postgres/
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: {{ template "smartcheck.fullname" . }}-db

          volumeMounts:
            - name: varrun
              mountPath: /var/run/postgresql
            - name: tmp
              mountPath: /tmp
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: postgresql-db
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.db) | indent 12 }}
      volumes:
        - name: varrun
          emptyDir:
            sizeLimit: 1Mi
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi
        - name: data
{{ if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ template "smartcheck.fullname" . }}-app-db
{{ else }}
          emptyDir:
            sizeLimit: {{ default "8Gi" .Values.persistence.db.size }}
{{ end }}
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.db) | indent 8 }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.db) | indent 8 }}
      restartPolicy: Always

{{ if .Values.networkPolicy.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db
  labels:
    service: db
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  podSelector:
    matchLabels:
      service: db
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
      {{ $k }}: {{ quote $v }}
{{- end }}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              service: registryviews
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
        - podSelector:
            matchLabels:
              service: scan
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
        - podSelector:
            matchLabels:
              service: auth
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
        - podSelector:
            matchLabels:
              service: image-scan
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
        - podSelector:
            matchLabels:
              service: vulnerability-scan
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
        - podSelector:
            matchLabels:
              service: metrics
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
        - podSelector:
            matchLabels:
              service: license
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
      ports:
        - protocol: TCP
          port: 5432
{{- end }}
{{- end -}}{{/* if not .Values.db.host */}}
