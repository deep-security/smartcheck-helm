{{- if .Values.registry.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "smartcheck.fullname" . }}-registry-config
  labels:
    service: registry
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
data:
  config.yml: |-
    version: 0.1
    log:
      fields:
        service: registry
      formatter: json
    storage:
      cache:
        blobdescriptor: inmemory
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3

---
apiVersion: v1
kind: Secret
metadata:
  name: registry-auth
  labels:
    service: registry
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
type: Opaque
data:
  {{- if (and .Values.registry.auth.username .Values.registry.auth.password) }}
  username: {{ .Values.registry.auth.username | b64enc }}
  password: {{ .Values.registry.auth.password | b64enc }}
  {{- end }}
  haSharedSecret: {{ randAlphaNum 16 | b64enc | quote }}


---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: registry
  labels:
    service: registry
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  replicas: {{ default 1 .Values.replicas.registry }}
  minReadySeconds: 5
  template:
    metadata:
      labels:
        service: registry
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
  {{- range $k, $v := (default (dict) .Values.extraLabels) }}
      {{ $k }}: {{ quote $v }}
  {{- end }}
    spec:
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.registry }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $containerSecurityContext := default .Values.securityContext.default.container $securityContext.container }}
{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.registry }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}
      containers:
      - name: registry
{{- if $securityContextEnabled }}
        securityContext:
{{ toYaml $containerSecurityContext | indent 10 }}
{{- end }}
        {{- $project := (default (default "deepsecurity" $imageDefaults.project) .project) }}
        {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
        {{- $tag := (default $imageDefaults.tag .tag) }}

        {{- if eq (default "" .registry) "-" }}
        image: {{ printf "%s:%s" $repository $tag | quote }}
        {{- else if eq (default "-" $imageDefaults.registry) "-" }}
        image: {{ printf "%s:%s" $repository $tag | quote }}
        {{- else }}
        image: {{ printf "%s/%s:%s" (default $imageDefaults.registry .registry) $repository $tag | quote }}
        {{- end }}
        imagePullPolicy: {{ default (default "IfNotPresent" $imageDefaults.pullPolicy) .pullPolicy }}
        {{- end }}
        command:
          - /entrypoint.sh
          - /bin/registry
          - serve
          - /etc/docker/registry/config.yml
        ports:
          - containerPort: 5000
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /
            port: 5000
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /
            port: 5000
        resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.registry) | indent 12 }}
        env:
{{- if (and .Values.registry.auth.username .Values.registry.auth.password) }}
          - name: REGISTRY_AUTH
            value: "htpasswd"
          - name: REGISTRY_AUTH_HTPASSWD_REALM
            value: "Registry Realm"
          - name: REGISTRY_AUTH_HTPASSWD_PATH
            value: "/auth/htpasswd"
{{- end }}
          - name: REGISTRY_HTTP_TLS_CERTIFICATE
            value: /etc/ssl/docker/tls.crt
          - name: REGISTRY_HTTP_TLS_KEY
            value: /etc/ssl/docker/tls.key
          - name: REGISTRY_HTTP_SECRET
            valueFrom:
              secretKeyRef:
                name: registry-auth
                key: haSharedSecret
          - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
            value: "/var/lib/registry"
          - name: REGISTRY_STORAGE_DELETE_ENABLED
            value: "true"
        volumeMounts:
{{- if (and .Values.registry.auth.username .Values.registry.auth.password) }}
          - name: htpasswd
            mountPath: /auth
            readOnly: true
{{- end }}
          - mountPath: /etc/ssl/docker
            name: tls-secret
            readOnly: true
          - name: data
            mountPath: /var/lib/registry/
          - name: registry-config
            mountPath: /etc/docker/registry

{{- if .Values.tasks.registryCleaner.enabled }}
      - name: garbage-collector
        {{- with .Values.images.registry }}
        {{- $project := (default (default "deepsecurity" $imageDefaults.project) .project) }}
        {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
        {{- $tag := (default $imageDefaults.tag .tag) }}

        {{- if eq (default "" .registry) "-" }}
        image: {{ printf "%s:%s" $repository $tag | quote }}
        {{- else if eq (default "-" $imageDefaults.registry) "-" }}
        image: {{ printf "%s:%s" $repository $tag | quote }}
        {{- else }}
        image: {{ printf "%s/%s:%s" (default $imageDefaults.registry .registry) $repository $tag | quote }}
        {{- end }}
        imagePullPolicy: {{ default (default "IfNotPresent" $imageDefaults.pullPolicy) .pullPolicy }}
        {{- end }}
        command: ["/bin/sh", "-c"]
        args: ["while true; ./entrypoint.sh /bin/registry garbage-collect /etc/docker/registry/config.yml || true; do sleep 3600; done"]
        env:
          - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
            value: "/var/lib/registry"
          - name: REGISTRY_STORAGE_DELETE_ENABLED
            value: "true"
        volumeMounts:
          - name: data
            mountPath: /var/lib/registry/
          - name: registry-config
            mountPath: /etc/docker/registry
{{- end }}

{{- if (and .Values.registry.auth.username .Values.registry.auth.password) }}
      initContainers:
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.registry }}
      - name: htpasswd
        {{- $project := (default (default "deepsecurity" $imageDefaults.project) .project) }}
        {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
        {{- $tag := (default $imageDefaults.tag .tag) }}

        {{- if eq (default "" .registry) "-" }}
        image: {{ printf "%s:%s" $repository $tag | quote }}
        {{- else if eq (default "-" $imageDefaults.registry) "-" }}
        image: {{ printf "%s:%s" $repository $tag | quote }}
        {{- else }}
        image: {{ printf "%s/%s:%s" (default $imageDefaults.registry .registry) $repository $tag | quote }}
        {{- end }}
        imagePullPolicy: {{ default (default "IfNotPresent" $imageDefaults.pullPolicy) .pullPolicy }}
        {{- end }}
        env:
          - name: USERNAME
            valueFrom:
              secretKeyRef:
                name: registry-auth
                key: username
          - name: PASSWORD
            valueFrom:
              secretKeyRef:
                name: registry-auth
                key: password
        command:
        - /bin/sh
        - -c
        - ./entrypoint.sh htpasswd -Bbc /auth/htpasswd "$USERNAME" "$PASSWORD"
        volumeMounts:
        - name: htpasswd
          mountPath: "/auth"
{{- end }}

      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.registry) | indent 8 }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.registry) | indent 8 }}
      volumes:
{{- if (and .Values.registry.auth.username .Values.registry.auth.password) }}
        - name: htpasswd
          emptyDir:
            sizeLimit: 1Mi
{{- end }}
        - name: data
          emptyDir:
            sizeLimit: {{ default "10Gi" .Values.registry.dataVolume.sizeLimit | quote }}
        - name: registry-config
          configMap:
            name: {{ template "smartcheck.fullname" . }}-registry-config
        - name: tls-secret
          secret:
            secretName: {{ required "certificate.secret.name is required when enabling pre-registry scanning. See https://github.com/deep-security/smartcheck-helm/wiki/Replace-the-service-certificate for instructions on replacing the default certificate." .Values.certificate.secret.name }}
            items:
              - key: {{ required "certificate.secret.certificate is required when certificate.secret.name is set" .Values.certificate.secret.certificate }}
                path: tls.crt
              - key: {{ required "certificate.secret.privateKey is required when certificate.secret.name is set" .Values.certificate.secret.privateKey }}
                path: tls.key

---
apiVersion: v1
kind: Service
metadata:
  name: registry
  labels:
    service: registry
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  type: ClusterIP
  ports:
    - port: 5000
      protocol: TCP
      name: registry
      targetPort: 5000
  selector:
    service: registry
    release: {{ .Release.Name }}

{{ if .Values.networkPolicy.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: registry
  labels:
    service: registry
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  podSelector:
    matchLabels:
      service: registry
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
      {{ $k }}: {{ quote $v }}
{{- end }}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              service: proxy
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
      ports:
        - protocol: TCP
          port: 5000

    - from:
        - podSelector:
            matchLabels:
              task: registry-cleaner
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
      ports:
        - protocol: TCP
          port: 5000

    - from: # any -- this sould just be kubelet for health probes
      ports:
        - protocol: TCP
          port: 8083
{{- end }}

{{- end -}}
