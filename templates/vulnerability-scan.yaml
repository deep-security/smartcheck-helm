apiVersion: v1
kind: Service
metadata:
  name: vulnerability-scan-internal
  labels:
    service: vulnerability-scan
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  ports:
    - port: 8081
      targetPort: 8081
      protocol: TCP
      name: internal
  selector:
    service: vulnerability-scan
    release: {{ .Release.Name }}
---
{{ include "smartcheck.service.database.secret" (dict "Chart" .Chart "Values" .Values "Release" .Release "service" "vulnerabilityscan") }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "smartcheck.fullname" . }}-vulnerability-scan
  labels:
    service: {{ template "smartcheck.fullname" . }}-vulnerability-scan
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
data:
  config.yaml: |
    clair:
      database:
        # Database driver
        type: pgsql
        options:
          # PostgreSQL Connection string
          # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
          # details are provided via environment variables
          source: "postgres://"

          # Number of elements kept in the cache
          # Values unlikely to change (e.g. namespaces) are cached in order to save prevent needless roundtrips to the database.
          cachesize: 16384

          # 32-bit URL-safe base64 key used to encrypt pagination tokens
          # Multiple clair instances in the same cluster need the same value.
          # We don't expose clair outside the application so this doesn't need to be a secret
          paginationkey: "XxoPtCUzrUv4JV5dS+yQ+MdW7yLEJnRMwigVY/bpgtQ="
      api:
        # v3 grpc/RESTful API server address
        port: 8081

        # Health server address
        # This is an unencrypted endpoint useful for load balancers to check to healthiness of the clair server.
        healthport: 8083

        # Deadline before an API request will respond with a 503
        timeout: 300s

        # Optional PKI configuration
        # If you want to easily generate client certificates and CAs, try the following projects:
        # https://github.com/coreos/etcd-ca
        # https://github.com/cloudflare/cfssl
        servername:
        cafile:
        keyfile:
        certfile:

      updater:
        # Frequency the database will be updated with vulnerabilities from the default data sources
        # The value 0 disables the updater entirely.
        interval: "24h"
        appendSeverity: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulnerability-scan
  labels:
    service: vulnerability-scan
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    appVersion: {{ .Chart.AppVersion }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  # We set revisionHistoryLimit to 0 because rollback should be done
  # using `helm rollback` rather than with `kubectl rollout undo`, so
  # we don't need to keep the old `ReplicaSet`s around.
  # https://kubernetes.io/docs/concepts/workloads/controllers/deployment
  revisionHistoryLimit: 0
  replicas: {{ default 1 .Values.replicas.vulnerabilityScan }}
  selector:
    matchLabels:
      service: vulnerability-scan
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        service: vulnerability-scan
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        appVersion: {{ .Chart.AppVersion }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
        {{ $k }}: {{ quote $v }}
{{- end }}
    spec:
      automountServiceAccountToken: false
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.vulnerabilityScan }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $containerSecurityContext := default .Values.securityContext.default.container $securityContext.container }}
{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}
      initContainers:
        - {{ include "smartcheck.db-initcontainer" (dict "Values" .Values "Chart" .Chart "Release" .Release "service" "vulnerabilityscan") | nindent 10 | trim }}
        - {{ include "smartcheck.vulndb-initcontainer" (dict "Values" .Values "Chart" .Chart "Release" .Release "service" "vulnerabilityscan") | nindent 10 | trim }}

      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.vulnerabilityScan }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}
      containers:
        - name: vulnerability-scan
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $containerSecurityContext | indent 12 }}
{{- end }}
          {{- $project := (default (default "deepsecurity" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}
          ports:
            - containerPort: 8081
              name: internal
            - containerPort: 8083
              name: health
          readinessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 60
          args:
            - --log-level=debug
          env:
            - name: GOGC
              value: "40"
            {{- include "smartcheck.service.database.env" (dict "Chart" .Chart "Release" .Release "Values" .Values "service" "vulnerabilityscan") | nindent 12 }}
            {{- include "smartcheck.proxy.env" . | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: config
              mountPath: /etc/clair
            {{- include "smartcheck.db-trust-volume-mount" . | nindent 12 }}
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.vulnerabilityScan) | indent 12 }}
      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: {{ default "3Gi" .Values.vulnerabilityScan.workVolume.sizeLimit | quote }}
        - name: config
          configMap:
            name: {{ template "smartcheck.fullname" . }}-vulnerability-scan
        {{- include "smartcheck.db-trust-volume" . | nindent 8 }}
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.vulnerabilityScan) | indent 8 }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.vulnerabilityScan) | indent 8 }}
      restartPolicy: Always

{{ if .Values.networkPolicy.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: vulnerability-scan
  labels:
    service: vulnerability-scan
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  podSelector:
    matchLabels:
      service: vulnerability-scan
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
      {{ $k }}: {{ quote $v }}
{{- end }}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - podSelector:
          matchLabels:
            service: scan
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
            {{ $k }}: {{ quote $v }}
{{- end }}
      ports:
        - protocol: TCP
          port: 8081
  egress:
    {{- include "smartcheck.to-dns-networkpolicy" . | nindent 4 }}
    {{- include "smartcheck.to-db-networkpolicy" . | nindent 4 }}
    {{- include "smartcheck.to-internal-service-networkpolicy" (dict "Release" .Release "Values" .Values "services" (list "scan")) | nindent 4 }}
    # allow egress to vulnerability feed
    - to: # any
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
    {{- include "smartcheck.networkpolicy.outbound" . | nindent 4 }}
{{- end }}
